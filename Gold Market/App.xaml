<Application x:Class="Gold_Market.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Gold_Market"
             StartupUri="MainWindow.xaml"
                xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:Con="clr-namespace:Gold_Market.Convertors">
    <Application.Resources>

        <!-- MiniPages.Purchasing.ReviewReceivedDeliveyMini.xaml  -->


        <Con:VisibilityConvertorString x:Key="VisibilityConvertorString" />
        <Con:ImageToSourceConverter x:Key="ImageToSourceConverter" />
        <Con:VisibilityInverse x:Key="VisibilityInverse" />

        <Style x:Key="HomeButtonMargin" TargetType="{x:Type Grid}">
            <Setter Property="MaxHeight" Value="60"/>
            <Setter Property="MaxWidth" Value="60"/>

        </Style>

        <sys:Double x:Key="ButtonAnimationFontSizeTo">14</sys:Double>
        <sys:Double x:Key="ButtonAnimationFontSizeFrom">12</sys:Double>


        <Style TargetType="Border" x:Key="BorderHomePageIcon">

            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                             
                                ShadowDepth="2"
                                 Color="#000000"
                                 Opacity=".16"
                                />
                </Setter.Value>
            </Setter>
        </Style>



        <!--الابعاد من طرف الشاشة اعلى و اسفل-->
        <GridLength x:Key="RowFirstHeight">10</GridLength>
        <!--الابعاد من طرف الشاشة يمين و يسار-->
        <GridLength x:Key="ColumnsFirstWidth">20</GridLength>

        <!--الابعاد من منتصف  الشاشة بين الكنترول يمين و يسار-->
        <GridLength x:Key="ColumnsBetweenControllWidth">20</GridLength>



        <!--الحد الاقصى لعرض الحقول داخل popup-->
        <sys:Double x:Key="PopoutColumnsWidthlabelMax">100</sys:Double>


        <!--الطول الخاص بالحقول label من اجل ان تكون متناسقة مع XD-->
        <GridLength x:Key="DefaultWidthColumnsPop">.6*</GridLength>



        <!--الطول الخاص بالحقول label من اجل ان تكون متناسقة مع XD-->
        <GridLength x:Key="PopoutColumnsWidthlabel">100</GridLength>



        <!--الطول الخاص بالحقول label من اجل ان تكون متناسقة مع XD-->
        <GridLength x:Key="PopoutColumnsWidthlabelCatergoris">120</GridLength>

        <!--الطول الخاص بالحقول label من اجل ان تكون متناسقة مع XD-->
        <GridLength x:Key="PopoutColumnsWidthlabelCustomer">100</GridLength>



        <!--الطول الخاص بالحقول label من اجل ان تكون متناسقة مع XD-->
        <GridLength x:Key="PopoutSalesColumnsWidthlabel">120</GridLength>

        <!--الحد الادني لمكان ادخال النصوص Textbox-->
        <sys:Double x:Key="TextboxMinHeight">30</sys:Double>

        <!--تحديد ارتفاع اادخال نصي من نوع بحث-->
        <sys:Double x:Key="TextboxSearchHeight">30</sys:Double>


        <GridLength x:Key="DataGridMinHight">205</GridLength>


        <!--تحديد طول القائمة المنسدلة ComboBox-->
        <sys:Double x:Key="ComboBoxWidth">214</sys:Double>

        <!--'طول القائمة المنسدة و لكن عندما تكون داخل Grid-->
        <GridLength x:Key="ComboBoxWidthInGrid">214</GridLength>


        <!--ارتفاع النصوص الرئيسية يعني اسماء الشاشات-->
        <GridLength x:Key="MainLabelHeight">60</GridLength>


        <!--التباعد بينا لكنترولس-->
        <GridLength x:Key="SpaceShapeRow">6</GridLength>


        <!--التباعد بينا لكنترولس-->
        <GridLength x:Key="RowsSpaceMargin">20</GridLength>



        <!--التباعد بين الحقول-->
        <GridLength x:Key="ColumnsSpaceMargin">13</GridLength>

        <!--التباعد بين الحقول اعلى و اسفل شاشة المبيعات-->
        <GridLength x:Key="SalesRowHeight">3</GridLength>

        <!--لون الخلفية popOut-->
        <SolidColorBrush Color="#FBFBFB" x:Key="BackgroundPopup"/>



        <!--الارتفاع من الاسفل لشاشات الرئيسية-->
        <GridLength x:Key="FooterHeight">100</GridLength>







        <GridLength x:Key="SpaceShape">30</GridLength>






        <GridLength x:Key="CustomerRowHeight">3</GridLength>


        <SolidColorBrush x:Key="MainColor">#FF5E86A6</SolidColorBrush>

        <SolidColorBrush x:Key="MainTextColor" >Black</SolidColorBrush>



        <Color x:Key="HyperOver">#ff066a98</Color>

        <SolidColorBrush Color="#066a98" x:Key="BlueSystem"/>
        <SolidColorBrush Color="#d4d4d4" x:Key="GraySystem"/>


        <SolidColorBrush x:Key="HoverRadioButton" Color="#FF4987A4" />
        <SolidColorBrush x:Key="HoverButton" Color="#fff8f9fb" />
        <SolidColorBrush x:Key="NormalButton" Color="#03BFFF" />

        <SolidColorBrush x:Key="MenuColor" Color=" #177498" />


        <!--ComboBox Style-->
        <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#e3e9ef" />
        <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#fff" />
        <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
        <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
        <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />


        <BooleanToVisibilityConverter x:Key="BoolToVis" />

     





       



        <Style TargetType="TextBlock" x:Key="FlatStyleButton">
            <Setter Property="Foreground" Value="LightGray"/>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>
                <EventTrigger RoutedEvent="UIElement.MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Duration="0:0:0.3" Storyboard.TargetProperty="Foreground.Color" To="CornflowerBlue" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="UIElement.MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Duration="0:0:0.3" Storyboard.TargetProperty="Foreground.Color" To="DarkGray" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>


        <Style x:Key="UsernameText" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Image Height="15" Width="15" Source="pack://application:,,,/Images/UsernameLogo.png"/>
                                <Grid Margin="15,0,0,0">
                                    <TextBlock Margin="3,0,0,0" FontFamily="Nunito Sans" Text="{TemplateBinding Uid}" FontSize="15"  Foreground="DarkGray">
                                        <TextBlock.Style >
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Style.Triggers >
                                                    <DataTrigger Binding="{Binding Text,ElementName=txtUserEntry}" Value="">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>

                                                </Style.Triggers>
                                                <Setter Property="Visibility" Value="Hidden"/>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                    <TextBox  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}" Name="txtUserEntry"  FontSize="15"  Foreground="DarkGray" Background="Transparent" Width="200" BorderThickness="0"/>

                                </Grid>
                            </StackPanel>
                            <Grid Height="1" Background="LightGray"/>
                        </StackPanel>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="PasswordText" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Image Height="15" Width="15" Source="pack://application:,,,/Images/PassLogin.png"/>
                                <Grid Margin="15,0,0,0">
                                    <TextBlock Margin="3,0,0,0" Text="{TemplateBinding Uid}" FontSize="15"  Foreground="DarkGray">
                                        <TextBlock.Style >
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Style.Triggers >
                                                    <DataTrigger Binding="{Binding Text,ElementName=txtUserEntry}" Value="">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>

                                                </Style.Triggers>
                                                <Setter Property="Visibility" Value="Hidden"/>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                    <TextBox  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}" Name="txtUserEntry"  FontSize="15"  Foreground="DarkGray" Background="Transparent" Width="200" BorderThickness="0"/>

                                </Grid>
                            </StackPanel>

                            <Grid Height="1" Background="LightGray"/>
                        </StackPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




        <Style x:Key="StandardButtonWithMargin" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border   Background="{StaticResource NormalButton}" x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"   CornerRadius="2">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="MouseEnter">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeTo}" Duration="0:0:0.1" />

                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseLeave">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeFrom}" Duration="0:0:0.1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>
                            <Grid>

                                <TextBlock Foreground="White"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               FontSize="12"
                                               FontFamily="Nunito Sans"
                                               Text="{TemplateBinding Content}" 
                                               Name="btnText" Margin="10,0"
                                           
                                           >


                                </TextBlock>

                            </Grid>

                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource HoverButton}" />
                                <Setter Property="BorderThickness" TargetName="border" Value="1" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource NormalButton}" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Thickness x:Key="MaxmizeButtonThickness">1</Thickness>


        <sys:Double x:Key="MaxmizeButtonSize" >10</sys:Double>
        <sys:Int32 x:Key="Int"></sys:Int32>


        <Style x:Key="MaxmizeToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">

                        <Border Padding="0" Margin="0" Background="{StaticResource NormalButton}" x:Name="border"   CornerRadius="4">

                            <Grid Margin="4,0,0,5"   VerticalAlignment="Bottom" HorizontalAlignment="Center">
                                <Border 
                                    BorderThickness="{StaticResource MaxmizeButtonThickness}"
                                    Width="{StaticResource MaxmizeButtonSize}" 
                                    Height="{StaticResource MaxmizeButtonSize}"  
                                      Name="border1" Margin="0,0,6,6"
                                    BorderBrush="White"  />


                                <Border  BorderThickness="{StaticResource MaxmizeButtonThickness}" 
                                        Width="{StaticResource MaxmizeButtonSize}"
                                        Height="{StaticResource MaxmizeButtonSize}" 
                                        Name="border2" 
                                          BorderBrush="White"
                                         Background="{StaticResource NormalButton}"  />
                            </Grid>


                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />
                                <Setter Property="Background" TargetName="border2" Value="dodgerblue" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




        <Style x:Key="NullButton" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border Padding="0" Margin="0" Background="Transparent" x:Name="border"   CornerRadius="4">



                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource HoverButton}" />
                                <Setter Property="Opacity" TargetName="border" Value=".2" />
                                <Setter Property="BorderThickness" TargetName="border" Value="1" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource NormalButton}" />



                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>





        <Style x:Key="MaxmizeButton" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border Padding="0" Margin="0" Background="{StaticResource NormalButton}" x:Name="border"   CornerRadius="4">

                            <Grid Margin="4,0,0,5"   VerticalAlignment="Bottom" HorizontalAlignment="Center">
                                <Border 
                                    BorderThickness="{StaticResource MaxmizeButtonThickness}"
                                    Width="{StaticResource MaxmizeButtonSize}" 
                                    Height="{StaticResource MaxmizeButtonSize}"  
                                      Name="border1" Margin="0,0,6,6"
                                    BorderBrush="White"  />


                                <Border  BorderThickness="{StaticResource MaxmizeButtonThickness}" 
                                        Width="{StaticResource MaxmizeButtonSize}"
                                        Height="{StaticResource MaxmizeButtonSize}" 
                                        Name="border2" 
                                          BorderBrush="White"
                                         Background="{StaticResource NormalButton}"  />
                            </Grid>


                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource HoverButton}" />
                                <Setter Property="BorderThickness" TargetName="border" Value="1" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource NormalButton}" />


                                <Setter Property="BorderBrush" TargetName="border1" Value="{StaticResource NormalButton}" />
                                <Setter Property="BorderBrush" TargetName="border2" Value="{StaticResource NormalButton}" />

                                <Setter Property="Background" TargetName="border2" Value="{StaticResource HoverButton}" />


                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




        <Style x:Key="StandardButtonToggle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">

                        <Border   Background="{StaticResource NormalButton}" x:Name="border" Width="{TemplateBinding Width}" Height="30"   CornerRadius="4">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="MouseEnter">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeTo}" Duration="0:0:0.1" />

                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseLeave">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeFrom}" Duration="0:0:0.1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>

                            <Grid >

                                <TextBlock Foreground="White"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               FontSize="12"
                                               FontFamily="Nunito Sans"
                                               Text="{TemplateBinding Content}" 
                                               Name="btnText" 
                                          Margin="10,0"
                                           >




                                </TextBlock>

                                <Canvas>
                                    <MediaElement LoadedBehavior="Close" Name="MediaElement" Source="CheckClick.wav"/>
                                </Canvas>

                            </Grid>



                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />


                            </Trigger>
                            <!--<Trigger Property="IsChecked" Value="True">
                                
                                <Setter Property="LoadedBehavior" TargetName="MediaElement" Value="Play" />


                            </Trigger>-->

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True" />
                                    <Condition Property="FontFamily" Value="Sound" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="LoadedBehavior" TargetName="MediaElement" Value="Play" />
                                </MultiTrigger.Setters>
                            </MultiTrigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="StandardButton" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border   Background="{StaticResource NormalButton}" x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"   CornerRadius="4">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="MouseEnter">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeTo}" Duration="0:0:0.05" />

                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseLeave">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeFrom}" Duration="0:0:0.05" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>

                            <Grid>

                                <TextBlock Foreground="White"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               FontSize="12"
                                               FontFamily="Nunito Sans"
                                               Text="{TemplateBinding Content}" 
                                               Name="btnText" Margin="10,0"
                                          
                                           >




                                </TextBlock>

                            </Grid>

                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource HoverButton}" />
                                <Setter Property="BorderThickness" TargetName="border" Value="1" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource NormalButton}" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="StandardButtonWhite" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border BorderBrush="{StaticResource NormalButton}" BorderThickness="1"  Background="#F8F9FB" x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"   CornerRadius="4">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="MouseEnter">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeTo}" Duration="0:0:0.1" />

                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseLeave">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeFrom}" Duration="0:0:0.1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>
                            <Grid>

                                <TextBlock Foreground="{StaticResource NormalButton}"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               FontSize="12"
                                               FontFamily="Nunito Sans"
                                               Text="{TemplateBinding Content}" 
                                               Name="btnText" Margin="4,0"
                                           
                                           />

                            </Grid>

                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource NormalButton}" />
                                <Setter Property="BorderThickness" TargetName="border" Value="1" />
                                <Setter Property="BorderBrush" TargetName="border" Value="#F8F9FB" />
                                <Setter Property="Foreground" TargetName="btnText" Value="white"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="StandardButtonLogin" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border   Background="{StaticResource NormalButton}" x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"   CornerRadius="20">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="MouseEnter">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeTo}" Duration="0:0:0.1" />

                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="MouseLeave">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="btnText" 
                                        Storyboard.TargetProperty="FontSize"
                                        To="{StaticResource ButtonAnimationFontSizeFrom}" Duration="0:0:0.1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Border.Triggers>

                            <Grid>

                                <TextBlock Foreground="White"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               FontSize="14"
                                               FontFamily="Nunito Sans"
                                               Text="{TemplateBinding Content}" 
                                               Name="btnText" Margin="4,0"
                                            FontWeight="Bold"
                                           />

                            </Grid>

                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource HoverButton}" />
                                <Setter Property="BorderThickness" TargetName="border" Value="1" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource NormalButton}" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="MenuButton" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border   Background="White" x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"   CornerRadius="2">

                            <Grid>

                                <TextBlock Foreground="Black"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Center"
                                               FontSize="{TemplateBinding FontSize}"
                                               FontFamily="Nunito Sans"
                                               Text="{TemplateBinding Content}" 
                                               Name="btnText" Margin="4,0"
                                           FontWeight="Bold"
                                           
                                           />

                            </Grid>

                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource NormalButton}" />
                                <Setter Property="BorderThickness" TargetName="border" Value="1" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource NormalButton}" />
                                <Setter Property="Foreground" TargetName="btnText" Value="white"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="ShadowBorderMain" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="{StaticResource BackgroundPopup}"/>


           
        </Style>

        <Style x:Key="ShadowBorder" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="{StaticResource BackgroundPopup}"/>
            <Setter Property="BorderBrush" Value="#6699cc"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Margin" Value="10"/>
          
        </Style>





        <Style x:Key="ShadowBorderHeader" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="White"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                                 ShadowDepth="1"
                               Direction="630"
                                 Color="#3E6492"
                                 Opacity="0.2"
                                BlurRadius="10"/>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="ShadowGrid" TargetType="{x:Type Grid}">
            <Setter Property="Background" Value="White"/>

            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                                 ShadowDepth="4"
                                 Direction="260"
                                 Color="#3E6492"
                                 Opacity="0.4"
                                BlurRadius="5"/>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="Shadow" TargetType="{x:Type TextBlock}">
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                                 ShadowDepth="4"
                                 Direction="330"
                                 Color="Black"
                                 Opacity="0.2"
                                BlurRadius="4"/>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="textblockEdit" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="#43425D"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
        </Style>


        <Style x:Key="HeaderTextBlockHomePage" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="#3E3E3E"/>
            <Setter Property="FontSize" Value="15"/>
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
        </Style>

        <Style x:Key="TextBlockStandard" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="#066A98"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
           
        </Style>


        <Style x:Key="TextBlock TitleHomePage" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="#003366"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            
        </Style>

        <Style x:Key="TextBlock WithShadow" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="#003366"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                                 ShadowDepth="2"
                                 Direction="220"
                                 Color="#4E545C"
                                 Opacity="0.36"
                                BlurRadius="4"/>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="Entry Edit" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border  CornerRadius="5"   Background="{StaticResource GraySystem}">
                            <Grid Margin="10,0">
                                <TextBox x:Name="txtShow" Background="Transparent" Text="{TemplateBinding Text}" BorderBrush="Transparent" BorderThickness="0"
                                         FontSize="15" VerticalContentAlignment="Top" HorizontalContentAlignment="Left" TextWrapping="Wrap"
                                         />

                                <TextBlock Foreground="#43425D" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}"  FontSize="12" VerticalAlignment="Top" HorizontalAlignment="Left" >
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtShow}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>


                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="StyleDateTime" TargetType="{x:Type DatePicker}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DatePicker}">
                        <Border Height="{StaticResource TextboxMinHeight}" Background="White" Margin="0,0" CornerRadius="5"   BorderThickness="1" BorderBrush="{StaticResource GraySystem}">
                            <Grid MinHeight="{StaticResource TextboxMinHeight}" >
                                <DatePicker  VerticalAlignment="Center" 
                                             x:Name="txtShow" 
                                             
                                             Text="{TemplateBinding SelectedDate}"
                                             BorderBrush="Transparent"
                                             BorderThickness="0"
                                         FontSize="{TemplateBinding FontSize}" 
                                            
                                            SelectedDate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedDate, UpdateSourceTrigger=PropertyChanged}"
                                         />


                            </Grid>


                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="StyleDateTimeDemo" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border  Background="White" Margin="0,0" CornerRadius="5"   BorderThickness="1" BorderBrush="{StaticResource GraySystem}">
                            <Grid MinHeight="{StaticResource TextboxMinHeight}" >
                                <Popup AllowsTransparency="True" StaysOpen="False" IsOpen="True">
                                    <Calendar Language="ar-SA"   VerticalAlignment="Center" 
                                             x:Name="txtShow" 
                                             
                                             
                                             BorderBrush="Transparent"
                                             BorderThickness="0"
                                         FontSize="{TemplateBinding FontSize}" 
                                            
                                            SelectedDate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedDate, UpdateSourceTrigger=PropertyChanged}"
                                         />
                                </Popup>



                            </Grid>


                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>






        <Style x:Key="HyperlinkTextblock" TargetType="TextBlock">

            <Setter Property="TextDecorations" Value="Underline"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Foreground" Value="DodgerBlue" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="FontSize" Value="14" />
            <Style.Triggers>

                <Trigger Property="IsMouseOver" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard HandoffBehavior="SnapshotAndReplace">
                            <Storyboard>
                                <ColorAnimation Duration="0:0:.5" To="{StaticResource HyperOver}" Storyboard.TargetProperty="Foreground.Color" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard HandoffBehavior="SnapshotAndReplace">
                            <Storyboard>
                                <ColorAnimation Duration="0:0:.5" To="DodgerBlue" Storyboard.TargetProperty="Foreground.Color" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="Entry New Warp" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border  CornerRadius="5"  BorderThickness="1" Background="White" BorderBrush="{StaticResource GraySystem}">
                            <Grid Margin="10,0">


                                <TextBlock  Foreground="#9FA9BC" Text="{TemplateBinding Uid}"  FontSize="12" VerticalAlignment="Top" HorizontalAlignment="Left" >
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtShow}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <TextBox x:Name="txtShow" Background="Transparent" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" BorderThickness="0"
                                         FontSize="14" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" TextWrapping="Wrap"
                                         />
                            </Grid>


                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="EntryNewWithHint" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Height="{StaticResource TextboxMinHeight}"   CornerRadius="5"  BorderThickness="1" Background="White" BorderBrush="{StaticResource GraySystem}">
                            <Grid Margin="5,0" >


                                <TextBlock Margin="5,0,0,0"  Foreground="#9FA9BC" Text="{TemplateBinding Uid}"  FontSize="12" VerticalAlignment="Center" HorizontalAlignment="Left" >
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtShow}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <TextBox x:Name="txtShow" Background="Transparent" Focusable="True" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" BorderThickness="0"
                                         FontSize="14" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" TextWrapping="Wrap"
                                         />
                            </Grid>


                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="txtShow" Property="FocusManager.FocusedElement" Value="{Binding ElementName=txtShow}"/>

                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>





        <Style x:Key="WithHintEdit" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Height="{StaticResource TextboxMinHeight}"  CornerRadius="5"  BorderThickness="1" BorderBrush="White" Background="{StaticResource GraySystem}">
                            <Grid Margin="10,0">


                                <TextBlock  Foreground="#9FA9BC" Text="{TemplateBinding Uid}"  FontSize="12" VerticalAlignment="Center" HorizontalAlignment="Left" >
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtShow}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <TextBox x:Name="txtShow" Focusable="True" Background="Transparent" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" BorderThickness="0"
                                         FontSize="14" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" TextWrapping="Wrap"
                                         />
                            </Grid>


                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="txtShow" Property="FocusManager.FocusedElement" Value="{Binding ElementName=txtShow}"/>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="Entry New" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border VerticalAlignment="Top" Height="{StaticResource TextboxMinHeight}" CornerRadius="5"  BorderThickness="1" Background="White" BorderBrush="{StaticResource GraySystem}">
                            <Grid  Margin="10,0">
                                <TextBox  x:Name="txtShow" Background="Transparent" Text="{TemplateBinding Text}" BorderBrush="Transparent" BorderThickness="0"
                                         FontSize="15" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" TextWrapping="Wrap"
                                         />

                                <TextBlock Foreground="#43425D" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}"  FontSize="12" VerticalAlignment="Top" HorizontalAlignment="Left" >
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtShow}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>


                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="ButtonPrint" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{StaticResource HoverButton}"  CornerRadius="2">

                            <Grid>

                                <Image Stretch="Uniform" Source="/images/Printbtn.png"/>

                            </Grid>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource NormalButton}"/>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="ButtonExcel" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{StaticResource HoverButton}"  CornerRadius="2">

                            <Grid Margin="5" Background="White">

                                <Image  Stretch="UniformToFill" Source="/images/Excel.png"/>

                            </Grid>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource NormalButton}"/>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
            <Grid Margin="0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition  />
                    <ColumnDefinition Width="15" />
                    <ColumnDefinition Width="12" />

                </Grid.ColumnDefinitions>



                <Border  Grid.ColumnSpan="3" Name="Border"
              BorderBrush="{StaticResource GraySystem}"
              CornerRadius="5" BorderThickness="1" 
              Background="Transparent" />
                <Border Margin="0,2" Grid.Column="1"  BorderBrush="#444" Name="ButtonBorder"
              
              Background="Transparent" />

                <Path Name="Arrow" Grid.Column="1" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Right" Fill="#9FA9BC" 
            VerticalAlignment="Center" Stretch="Fill"  Height="8" Width="11" />



                <TextBlock Text="{TemplateBinding Uid}" Grid.ColumnSpan="1" VerticalAlignment="Center" Margin="10,0,0,0" Foreground="Gray" Visibility="{TemplateBinding Content,Converter={StaticResource VisibilityConvertorString}}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <!--<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>-->
                    <Setter Property="Panel.Background" TargetName="Border" Value="WhiteSmoke"/>
                </Trigger>
                <!--<Trigger Property="ToggleButton.IsChecked" Value="True">
                    -->
                <!--<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>-->
                <!--
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
                </Trigger>-->
                <Trigger Property="UIElement.IsEnabled" Value="False">
                    <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                    <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
                </Trigger>

            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}">
            <Setter Property="Height" Value="30"/>
            <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="TextElement.Foreground" Value="Black"/>
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid  >

                            <TextBlock VerticalAlignment="Center" Margin="5,0,0,0"  Name="txtHint"  Visibility="Hidden"/>





                            <ToggleButton
                                Uid="{TemplateBinding Uid}"  
                                Content="{Binding ElementName=txtHint,Path=Visibility}"
                                MinHeight="{StaticResource TextboxMinHeight}"
                                Name="ToggleButton" 
                                ClickMode="Press" 
                                Focusable="False"
                                Background="Transparent"
                                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" 
                                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>



                            <ContentPresenter  Name="ContentSite"  IsHitTestVisible="False"
                              HorizontalAlignment="Left" VerticalAlignment="Center"                              
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="10,0,0,0"/>





                            <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Focusable="True" >
                                <TextBox.Template>
                                    <ControlTemplate TargetType="TextBox" >
                                        <Border Name="PART_ContentHost" Focusable="False" />
                                    </ControlTemplate>
                                </TextBox.Template>
                            </TextBox>
                            <!-- Popup showing items -->
                            <Popup Name="Popup"
                                   Placement="Bottom"
                                   Focusable="False"
                                   AllowsTransparency="True"
                                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                                   PopupAnimation="Slide"
                                   >
                                <Grid Name="DropDown" SnapsToDevicePixels="True" 
                                                                               MinWidth="{TemplateBinding ActualWidth}"
                                                                               MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                    <Border Name="DropDownBorder" Background="White" Margin="0, 1, 0, 0"
                                                                                                        CornerRadius="0" BorderThickness="1,1,1,1" 
                                                                                                        BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"/>
                                    <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>

                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.IsGrouping" Value="True">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                            </Trigger>
                            <Trigger Property="ComboBox.IsEditable" Value="True">
                                <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                                <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                                <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="ComboBox.SelectedIndex" Value="-1" >
                                <Setter Property="Visibility" TargetName="txtHint" Value="Visible"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--ComboBox Style-->

        <Style x:Key="ClearTextblock" TargetType="{x:Type TextBlock}">

            <Setter Property="TextDecorations" Value="Underline"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="Foreground" Value="#066A98"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="Gray" />
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>
            </Style.Triggers>
        </Style>



        <Style x:Key="SearchTextBoxStandard" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Height="{StaticResource TextboxSearchHeight}"  CornerRadius="5" Margin="0,0" BorderThickness="1" BorderBrush="{StaticResource GraySystem}" Background="#F5F5F8">
                            <Grid Margin="5,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="40"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="40"/>

                                </Grid.ColumnDefinitions>
                                <Image MaxHeight="15" Stretch="UniformToFill" Source="pack://application:,,,/images/Search.png"/>
                                <TextBlock Margin="3,0,0,0" Foreground="#9FA9BC" Grid.Column="2"  Text="{TemplateBinding Uid}" FontFamily="Nunito Sans" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Left" >
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtShow}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>



                                <TextBox Foreground="#9FA9BC" Grid.Column="1"  x:Name="txtShow" Background="Transparent" FontFamily="Nunito Sans"
                                             Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}"
                                             BorderBrush="Transparent" BorderThickness="0"
                                         FontSize="14" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" 
                                        Grid.ColumnSpan="3" 
                                             />


                            </Grid>


                        </Border>



                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="SearchTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Height="{StaticResource TextboxSearchHeight}"  CornerRadius="5"   Background="#F5F5F8">
                            <Grid Margin="10,5">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="5"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="1"/>

                                </Grid.ColumnDefinitions>
                                <Image Height="20" Stretch="UniformToFill" Source="pack://application:,,,/images/Search.png"/>
                                <TextBlock   Foreground="#9FA9BC" Grid.Column="2"  Text="{TemplateBinding Uid}" FontFamily="Nunito Sans" FontSize="12" VerticalAlignment="Center" HorizontalAlignment="Left" >
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtShow}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>



                                <TextBox Foreground="Black" Grid.Column="2" x:Name="txtShow" Background="Transparent" FontFamily="Nunito Sans"
                                             Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}"
                                             BorderBrush="Transparent" BorderThickness="0"
                                         FontSize="14" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" 
                                        Grid.ColumnSpan="2" 
                                             />

                                <TextBlock Text="{TemplateBinding Tag}"
                                               Grid.Column="2"
                                               VerticalAlignment="Center"
                                               HorizontalAlignment="Right"
                                               TextDecorations="Underline"
                                               FontSize="14"
                                               FontFamily="Nunito Sans"
                                              x:Name="lblclear"
                                              
                                               >
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Foreground" Value="#4C84FF"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Foreground" Value="Gray" />
                                                    <Setter Property="Cursor" Value="Hand" />
                                                </Trigger>

                                            </Style.Triggers>
                                        </Style>

                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>


                        </Border>



                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>









        <!--Cashier Style-->



        <SolidColorBrush x:Key="DarkBlueCashier" Color="#066A98"/>
        <SolidColorBrush x:Key="LightBlueCashier" Color="#4C84FF"/>

        <SolidColorBrush x:Key="BorderBrushCashier" Color="#DBDBDB"/>
        <Style x:Key="ShadowGridCashier" TargetType="{x:Type Grid}">
            <Setter Property="Background" Value="White"/>

            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                                 ShadowDepth="3"
                                 Direction="270"
                                 Color="#3E6492"
                                 Opacity=".16"
                                BlurRadius="4"/>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TextBoxTotal" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border  Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" CornerRadius="5">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#3FA9D1" Offset="1"/>
                                    <GradientStop Color="#FF3B7B93" Offset="0"/>
                                </LinearGradientBrush>
                            </Border.Background>



                            <TextBlock FontFamily="Nunito Sans"
                                           FontSize="20"
                                           FontWeight="Black"
                                           Margin="24,0,0,0"
                                           Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Text,UpdateSourceTrigger=PropertyChanged}"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Left"
                                           Foreground="White"
                                           />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="TextBlockLableCashier" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="#3E3E3E"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
        </Style>

        <Style x:Key="TextBoxEntryCashier" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border BorderThickness="1" BorderBrush="{StaticResource BorderBrushCashier}" Background="White" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" CornerRadius="5">




                            <TextBox IsReadOnly="{TemplateBinding IsReadOnly}"  FontFamily="Nunito Sans"
                                           Margin="15,0"
                                           FontWeight="Black"
                                           BorderThickness="0"
                                           Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Text,UpdateSourceTrigger=PropertyChanged}"
                                          Foreground="{TemplateBinding Foreground}"
                                         Background="Transparent"
                                          VerticalContentAlignment="Center"
                                          HorizontalContentAlignment="Center"
                                          FontSize="{TemplateBinding FontSize }"
                                           />

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>





        <Style x:Key="TextBoxWrapCashier" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border BorderThickness="1" BorderBrush="{StaticResource BorderBrushCashier}" Background="White" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" CornerRadius="5">

                            <Grid>
                                <TextBlock Margin="3,0,0,0" Text="{TemplateBinding Uid}" FontSize="{TemplateBinding FontSize }"  Foreground="#9FA9BC">
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtdata}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <TextBox  FontFamily="Nunito Sans"
                                          
                                         
                                           BorderThickness="0"
                                           Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Text,UpdateSourceTrigger=PropertyChanged}"
                                          Foreground="{TemplateBinding Foreground}"
                                         Background="Transparent"
                                          VerticalContentAlignment="Top"
                                          HorizontalContentAlignment="Left"
                                          FontSize="{TemplateBinding FontSize }"
                                          TextWrapping="Wrap"
                                              Name="txtdata"
                                           />
                            </Grid>


                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CLoseCashier" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"  Background="{StaticResource HoverButton}"  CornerRadius="2">

                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Stretch">
                                <TextBlock VerticalAlignment="Center" Name="xlbl" Foreground="Red" FontWeight="Bold" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="Center" Text="X"/>
                                <TextBlock Name="closelbl" Foreground="Red" FontWeight="Bold" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="Center" Text="{TemplateBinding Content}"/>


                                <!--<Image Stretch="Uniform" Source="/images/XClose.png"/>-->

                            </StackPanel>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource NormalButton}"/>
                                <Setter Property="Foreground" TargetName="xlbl" Value="white"/>
                                <Setter Property="Foreground" TargetName="closelbl" Value="white"/>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="RadioButtonCashier"  TargetType="{x:Type RadioButton}" >
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <BulletDecorator Background="Transparent" Cursor="Hand">
                            <BulletDecorator.Bullet>
                                <Grid Height="16" Width="16">
                                    <!--Define size of the Bullet-->
                                    <!--The two borders-->
                                    <Border Name="RadioOuter" Background="Transparent" BorderBrush="Gainsboro" BorderThickness="1" CornerRadius="10"/>
                                    <Border CornerRadius="10" Margin="3" Name="RadioMark" Background="#2BC3CC" Visibility="Hidden" />
                                </Grid>
                            </BulletDecorator.Bullet>
                            <!--Text element-->
                            <TextBlock Margin="10,1,0,0" Foreground="#FF3E3E3E" FontFamily="Nunito Sans" FontSize="13" FontWeight="SemiBold" VerticalAlignment="Center">
                        <ContentPresenter />
                            </TextBlock>
                        </BulletDecorator>
                        <!--If item is checked, trigger the visibility of the mark-->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <!--If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting-->
                                <Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="RadioOuter" Property="BorderBrush" Value="Gainsboro" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="SearchTextBoxCashier" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border Padding="3" CornerRadius="5"   Background="#F2F2F2">
                            <Grid >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="20"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="40"/>

                                </Grid.ColumnDefinitions>
                                <Image Stretch="UniformToFill" Source="pack://application:,,,/images/Search.png"/>
                                <TextBlock Margin="3,0,0,0" Foreground="#9FA9BC" Grid.Column="2"  Text="{TemplateBinding Uid}" FontFamily="Nunito Sans" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Left" >
                                    <TextBlock.Style >
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers >
                                                <DataTrigger Binding="{Binding Text,ElementName=txtShow}" Value="">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>

                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>



                                <TextBox Foreground="#9FA9BC" Grid.Column="2" x:Name="txtShow" Background="Transparent" FontFamily="Nunito Sans"
                                             Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}"
                                             BorderBrush="Transparent" BorderThickness="0"
                                         FontSize="14" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" 
                                        Grid.ColumnSpan="2" 
                                             />


                            </Grid>


                        </Border>



                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


















        <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplateIn">
            <Grid >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition  Width="30"/>
                    <ColumnDefinition Width="30" />

                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="3" Name="Border"
              BorderBrush="{StaticResource GraySystem}"
              CornerRadius="5" BorderThickness="0" 
              Background="{StaticResource NormalButton}" />
                <Border Grid.Column="1"  BorderBrush="#444" Name="ButtonBorder"
              
              Background="Transparent" />

                <Path Name="Arrow" Grid.Column="2" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Right" Fill="White" 
            VerticalAlignment="Center" Stretch="Fill"  Height="10" Width="15" Margin="0,0,5,0"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource NormalButton}"/>
                    <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource NormalButton}"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource NormalButton}"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="False">
                    <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                    <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="ComboBoxFlatStyleIn"  TargetType="{x:Type ComboBox}">
            <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="TextElement.Foreground" Value="Black"/>
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>

                            <ToggleButton Name="ToggleButton" Grid.Column="2" 
                ClickMode="Press" Focusable="False" Background="Transparent"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplateIn}"/>


                            <ContentPresenter Visibility="Visible" Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                              HorizontalAlignment="Stretch" VerticalAlignment="Center"                              
                            Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"  />


                            <TextBox Visibility="Collapsed" Name="PART_EditableTextBox" Margin="3, 3, 23, 3"   IsReadOnly="{TemplateBinding IsReadOnly}"
                                     Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center"  Focusable="True" FontSize="20" Foreground="White">
                                <TextBox.Template>
                                    <ControlTemplate TargetType="TextBox" >
                                        <Border Name="PART_ContentHost" Focusable="False" />
                                    </ControlTemplate>
                                </TextBox.Template>
                            </TextBox>
                            <!-- Popup showing items -->
                            <Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide">

                                <Grid Name="DropDown" SnapsToDevicePixels="True" Background="Transparent" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"  MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                    <Border Name="DropDownBorder" Background="White" Margin="0, 1, 0, 0"
                        CornerRadius="5" BorderThickness="0" 
                        BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"/>
                                    <ScrollViewer Background="Transparent" Margin="4" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Disabled">

                                        <StackPanel  IsItemsHost="True" 
                            KeyboardNavigation.DirectionalNavigation="Contained" >

                                        </StackPanel>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.IsGrouping" Value="True">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                            </Trigger>
                            <Trigger Property="ComboBox.IsEditable" Value="True">
                                <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                                <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                                <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--ComboBox Style-->


        <!--Menu Page Style //////////////////////////////////////////////////////////////////////////////////////  -->



        <Style TargetType="{x:Type RadioButton}" x:Key="RadioButtonHeader">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border  Background="{TemplateBinding Background}" Name="border" Padding="0,5" BorderThickness="0">
                            <TextBlock FontSize="50"    FontFamily="Nunito Sans" VerticalAlignment="Center" Margin="15,0" Foreground="{TemplateBinding Foreground}" Name="btnText"  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, UpdateSourceTrigger=PropertyChanged}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource HoverRadioButton}" />

                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="white" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="Grid" x:Key="GridMenuShado">
            <Setter Property="Effect">
                <Setter.Value>

                    <DropShadowEffect BlurRadius="10"
                              Color="#877b77"
                              Opacity=".4"
                              ShadowDepth="0"
                              Direction="0" />

                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleAsImageWithHint">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid VerticalAlignment="Center" Background="Transparent" Name="border">

                            <Grid.RowDefinitions>
                                <RowDefinition Height="2"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <Image Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center" Height="30" Width="50"  Stretch="Uniform"  Source="{TemplateBinding Uid,Converter={StaticResource ImageToSourceConverter}}"/>

                            <Canvas>
                                <MediaElement   LoadedBehavior="Close" Source="CheckClick.wav" Name="myMediaElement"  />
                            </Canvas>

                            <Popup Grid.Row="0" Name="pophint" IsOpen="False" AllowsTransparency="True" PlacementTarget="{Binding ElementName=border}" Placement="Top">
                                <Border Style="{StaticResource ShadowBorder}">
                                    <Grid >
                                        <Label Content="{TemplateBinding FontFamily}"/>
                                    </Grid>
                                </Border>

                            </Popup>
                        </Grid>
                        <!--<ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="WhiteSmoke" />

                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource MenuColor}" />

                            </Trigger>

                        </ControlTemplate.Triggers>-->

                        <ControlTemplate.Triggers>

                            <Trigger Property="IsChecked" Value="True" >

                                <Setter Property="LoadedBehavior" TargetName="myMediaElement" Value="Play"/>


                                <Trigger.EnterActions>
                                    <BeginStoryboard HandoffBehavior="SnapshotAndReplace">
                                        <Storyboard>
                                            <DoubleAnimation 
                                                               Storyboard.TargetName="border"
                                                               Storyboard.TargetProperty="(Border.Opacity)" 
                                                               From="1" To="0" Duration="0:0:.1" AutoReverse="True" />




                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation 
                                                               Storyboard.TargetName="border"
                                                               Storyboard.TargetProperty="(Border.Opacity)" 
                                                               From="0" To="1" Duration="0:0:.1"   />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>



                            </Trigger>


                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="pophint" Property="IsOpen" Value="true"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleAsImage">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid Background="Transparent" Name="border">

                            <Image VerticalAlignment="Center" HorizontalAlignment="Center" Height="30" Width="50"  Stretch="Uniform"  Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>

                            <Canvas>
                                <MediaElement   LoadedBehavior="Close" Source="CheckClick.wav" Name="myMediaElement"  />
                            </Canvas>
                        </Grid>
                        <!--<ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="WhiteSmoke" />

                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource MenuColor}" />

                            </Trigger>

                        </ControlTemplate.Triggers>-->

                        <ControlTemplate.Triggers>

                            <Trigger Property="IsChecked" Value="True" >

                                <Setter Property="LoadedBehavior" TargetName="myMediaElement" Value="Play"/>


                                <Trigger.EnterActions>
                                    <BeginStoryboard HandoffBehavior="SnapshotAndReplace">
                                        <Storyboard>
                                            <DoubleAnimation 
                                                               Storyboard.TargetName="border"
                                                               Storyboard.TargetProperty="(Border.Opacity)" 
                                                               From="1" To="0" Duration="0:0:.1" AutoReverse="True" />




                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation 
                                                               Storyboard.TargetName="border"
                                                               Storyboard.TargetProperty="(Border.Opacity)" 
                                                               From="0" To="1" Duration="0:0:.1"   />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>



                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style TargetType="{x:Type RadioButton}" x:Key="RadioButtonMenuWithArrow">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border CornerRadius="10"  Background="{TemplateBinding Background}" Name="border" Padding="5" BorderThickness="0">
                            <StackPanel>
                                <Image Height="30" Width="30"   Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>
                                <TextBlock  FontSize="13" HorizontalAlignment="Center" FontFamily="Nunito Sans" VerticalAlignment="Center" Margin="5,0" Foreground="{TemplateBinding Foreground}" Name="btnText"  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, UpdateSourceTrigger=PropertyChanged}"/>


                                <Path Name="Arrow" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Center" Fill="White" 
            VerticalAlignment="Center" Stretch="Fill"  Height="10" Width="15" Visibility="Hidden" />




                            </StackPanel>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="WhiteSmoke" />

                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource MenuColor}" />
                                <Setter Property="Foreground" TargetName="btnText" Value="White"/>
                                <Setter Property="FontWeight" TargetName="btnText" Value="Bold"/>
                                <Setter Property="Visibility" TargetName="Arrow" Value="Visible" />

                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="{x:Type RadioButton}" x:Key="RadioButtonMenu">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border CornerRadius="10"  Background="White" Name="border" Padding="5" BorderThickness="0">
                            <StackPanel>
                                <Image Height="30" Width="30"  Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>
                                <TextBlock  FontSize="13" HorizontalAlignment="Center" FontFamily="Nunito Sans" VerticalAlignment="Center" Margin="5,0" Foreground="{TemplateBinding Foreground}" Name="btnText"  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, UpdateSourceTrigger=PropertyChanged}"/>

                            </StackPanel>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="WhiteSmoke" />

                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource MenuColor}" />
                                <Setter Property="Foreground" TargetName="btnText" Value="White"/>
                                <Setter Property="FontWeight" TargetName="btnText" Value="Bold"/>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Menu Page Style //////////////////////////////////////////////////////////////////////////////////////  -->


        <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxStyle">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <!--BorderBrush="#D4D4D4"-->
                        <StackPanel Orientation="Horizontal">
                            <Grid>
                                <Canvas>
                                    <MediaElement   LoadedBehavior="Close" Source="CheckClick.wav" Name="myMediaElement"  />
                                </Canvas>



                                <Border VerticalAlignment="Center" HorizontalAlignment="Center"
                                     BorderThickness="2" 
                                    CornerRadius="5" Height="20" Width="20" Background="{TemplateBinding Background}" Name="border"
                                        BorderBrush="#D4D4D4"
                                        >

                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="BorderBrush" Value="#D4D4D4" />
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Trigger.EnterActions>
                                                        <BeginStoryboard HandoffBehavior="SnapshotAndReplace">
                                                            <Storyboard>
                                                                <ColorAnimation Duration="0:0:.5" To="DodgerBlue" Storyboard.TargetProperty="BorderBrush.Color" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.EnterActions>
                                                    <Trigger.ExitActions>
                                                        <BeginStoryboard HandoffBehavior="SnapshotAndReplace">
                                                            <Storyboard>
                                                                <ColorAnimation Duration="0:0:.5" To="#D4D4D4" Storyboard.TargetProperty="BorderBrush.Color" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.ExitActions>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>






                                    <!--<Image Height="15" Width="15" Name="image1" Visibility="Hidden"  Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>-->
                                    <Image Height="15" Width="15" Name="image1" Visibility="Hidden"  Source="/images/CheckIcon.png"/>



                                </Border>

                                <!--<Border VerticalAlignment="Center" HorizontalAlignment="Center"
                                     BorderThickness="2" BorderBrush="DodgerBlue"
                                    CornerRadius="5" Height="20" Width="20" Background="{TemplateBinding Background}" Name="borderAnimation" >

                                   


                                </Border>-->
                            </Grid>

                            <TextBlock  Margin="10,0,0,0" Style="{StaticResource textblockEdit}"   Name="btnText"  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, UpdateSourceTrigger=PropertyChanged}"/>

                        </StackPanel>





                        <ControlTemplate.Triggers>

                            <Trigger Property="IsChecked" Value="True" >
                                <Setter Property="Visibility" TargetName="image1" Value="Visible"/>
                                <Setter Property="LoadedBehavior" TargetName="myMediaElement" Value="Play"/>


                                <Trigger.EnterActions>
                                    <BeginStoryboard HandoffBehavior="SnapshotAndReplace">
                                        <Storyboard>
                                            <DoubleAnimation 
                                                               Storyboard.TargetName="border"
                                                               Storyboard.TargetProperty="(Border.Opacity)" 
                                                               From="1" To="0" Duration="0:0:.5" AutoReverse="True" />




                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation 
                                                               Storyboard.TargetName="border"
                                                               Storyboard.TargetProperty="(Border.Opacity)" 
                                                               From="0" To="1" Duration="0:0:.5"   />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>



                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>














        <!--Tree Account Page___________________________________________________________________________________________________________________________________________ -->
        <Style x:Key="MediaButtonDark" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#ff066a98"/>
            <Setter Property="Foreground" Value="#ffffffff"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="SnapsToDevicePixels" Value="True" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="#ff066a98" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Background="{TemplateBinding Background}">
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Path x:Name="PathIcon"/>
                                <ContentPresenter x:Name="MyContentPresenter"/>
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#fff8f9fb" />
                                <Setter Property="Foreground" Value="#ff066a98" />
                                <!--<Setter TargetName="PathIcon" Property="Fill" Value="Black" />-->
                            </Trigger>

                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#FFC5ABFF" />
                                <Setter Property="Foreground" Value="#fff8f9fb" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MediaButtonLight" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#fff8f9fb"/>
            <Setter Property="Foreground" Value="#ff066a98"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="SnapsToDevicePixels" Value="True" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="#ff066a98" BorderThickness="{TemplateBinding BorderThickness}"  CornerRadius="4" Background="{TemplateBinding Background}">
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Path x:Name="PathIcon"/>
                                <ContentPresenter x:Name="MyContentPresenter"/>
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FF4782B2" />
                                <Setter Property="Foreground" Value="#ffffffff" />
                                <!--<Setter TargetName="PathIcon" Property="Fill" Value="Black" />-->
                            </Trigger>

                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#FFC5ABFF" />
                                <Setter Property="Foreground" Value="#fff8f9fb" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="PopupContentStyle" TargetType="ContentControl">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContentControl">
                        <Grid Width="Auto" Height="Auto" Background="Transparent" Margin="0,0,101.6,-12">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Border BorderThickness="2" CornerRadius="8" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="2" Margin="10,10,10.2,-37.8">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="#ffd4d4d4"/>
                                </Border.BorderBrush>
                                <Border.Background>
                                    <SolidColorBrush Color="White"/>
                                </Border.Background>
                            </Border>

                            <StackPanel Grid.Row="0" Margin="0,0,0,0">
                                <Label Foreground="#ff066a98" Content="{TemplateBinding FontFamily}" Margin="17,10,21.2,0" Height="41"/>
                            </StackPanel>

                            <GroupBox Grid.Row="1" Header="{TemplateBinding Uid}" HorizontalAlignment="Stretch" Margin="29,9.8,29.2,-17.6" Width="Auto" Height="123" VerticalAlignment="Top">
                                <StackPanel>
                                    <ContentPresenter Height="80" />
                                </StackPanel>
                            </GroupBox>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="TextBox" x:Key="Textbox1">
            <Setter Property="Padding" Value="3"/>
            <Setter Property="Margin" Value="3"/>
            <Setter Property="Foreground" Value="#000"/>
            <Setter Property="FontSize" Value="11.7"/>
            <Setter Property="MinHeight" Value="20"/>
            <Setter Property="MinWidth" Value="50"/>
            <Setter Property="FontWeight" Value="Regular" />
            <Setter Property="TextAlignment" Value="Center" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border"
                             CornerRadius="4"
                             BorderBrush="#ffd4d4d4"
                             BorderThickness="2"
                             Background="#fff">

                            <ScrollViewer x:Name="PART_ContentHost"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden"/>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="LightGray"/>
                                <Setter Property="Foreground" Value="LightGray" />

                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter Property="Foreground" Value="#ff066a98" />
                                <Setter Property="BorderBrush" TargetName="border" Value="#ff066a98"/>
                            </Trigger>
                        </ControlTemplate.Triggers>


                    </ControlTemplate>

                </Setter.Value>

            </Setter>



        </Style>

        <Style TargetType="Button" x:Key="ButtonCachclick1">
            <Setter Property="TextBlock.TextAlignment" Value="Center" />
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground"  Value="#ff066a98"/>
            <Setter Property="Height"  Value="25"/>
            <Setter Property="Background"  Value="#fff8f9fb"/>
            <Setter Property="BorderBrush"  Value="#ff066a98"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="3" Background="White" BorderBrush="#ff066a98" BorderThickness="1" >
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Foreground="#ffffffff" Height="30" Background="#ff066a98" BorderBrush="#ff066a98"-->
        <Style TargetType="Button" x:Key="ButtonCachclick2">
            <Setter Property="TextBlock.TextAlignment" Value="Center" />
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground"  Value="#ffffffff"/>
            <Setter Property="Height"  Value="25"/>
            <Setter Property="Background"  Value="#ff066a98"/>
            <Setter Property="BorderBrush" Value="#ff066a98"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="3" Background="#ff066a98" BorderBrush="#ff066a98" BorderThickness="1" >
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!--Tree Account Page___________________________________________________________________________________________________________________________________________ -->




        <GridLength x:Key="ExpanderColumnsSpacing">10</GridLength>
        <GridLength x:Key="ExpanderRowsSpacing">10</GridLength>



        <GridLength x:Key="UnitColumnWidth">45</GridLength>

        <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
        <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
        <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
        <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
        <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
        <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="19"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="-90"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                </Grid>
                                <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="180"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                </Grid>
                                <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="19"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="90"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
                                </Grid>
                                <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderHeaderFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">

                        <Border Padding="{TemplateBinding Padding}">

                            <Grid Background="Transparent" SnapsToDevicePixels="False" Height="35">

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="37"/>
                                </Grid.ColumnDefinitions>
                                <Ellipse Margin="9"  Grid.Column="1" x:Name="circle" Fill="#ff18779c" Stroke="Gray" HorizontalAlignment="Stretch" Height="Auto"  VerticalAlignment="Stretch" Width="Auto" />
                                <Path     Grid.Column="1" x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="White"  StrokeThickness="2" VerticalAlignment="Center"   Stretch="Fill" Width="10" Height="5"/>
                                <ContentPresenter Grid.Column="0" HorizontalAlignment="Left" Margin="4,-4,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="ShadowBorderExpander" TargetType="{x:Type Border}">
            <Setter Property="CornerRadius" Value="10"/>

            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                                 ShadowDepth="1"
                               Direction="630"
                                 Color="#3E6492"
                                 Opacity="0.2"
                                BlurRadius="20"/>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="ExpanderStyleNoCorner" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border CornerRadius="0" Style="{StaticResource ShadowBorderExpander}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"  >

                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" 
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                              Content="{TemplateBinding Header}"
                                              DockPanel.Dock="Top"
                                              Foreground="{TemplateBinding Foreground}"
                                              FontWeight="{TemplateBinding FontWeight}"
                                              FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                              FontStyle="{TemplateBinding FontStyle}"
                                              FontStretch="{TemplateBinding FontStretch}"
                                              FontSize="{TemplateBinding FontSize}"
                                              FontFamily="{TemplateBinding FontFamily}"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              Margin="1" MinWidth="0" MinHeight="0" 
                                              Padding="{TemplateBinding Padding}"
                                              Style="{StaticResource ExpanderDownHeaderStyle}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              />
                                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                <Setter Property="Background" TargetName="HeaderSite" Value="red" />
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Right">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Up">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Left">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border Style="{StaticResource ShadowBorderExpander}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"  >
                            <Border.Effect>
                                <DropShadowEffect 
                                    BlurRadius="10"
                                    Direction="630"
                                    RenderingBias="Quality"
                                    Opacity="0.20" 
ShadowDepth="2"/>
                            </Border.Effect>
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" 
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                              Content="{TemplateBinding Header}"
                                              DockPanel.Dock="Top"
                                              Foreground="{TemplateBinding Foreground}"
                                              FontWeight="{TemplateBinding FontWeight}"
                                              FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                              FontStyle="{TemplateBinding FontStyle}"
                                              FontStretch="{TemplateBinding FontStretch}"
                                              FontSize="{TemplateBinding FontSize}"
                                              FontFamily="{TemplateBinding FontFamily}"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              Margin="1" MinWidth="0" MinHeight="0" 
                                              Padding="{TemplateBinding Padding}"
                                              Style="{StaticResource ExpanderDownHeaderStyle}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              />
                                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                <Setter Property="Background" TargetName="HeaderSite" Value="red" />
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Right">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Up">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Left">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="MetroButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#EEEEEEEE"/>
            <Setter Property="Foreground" Value="Black"/>
            <!--<Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>-->
            <Setter Property="Padding" Value="10 5"/>
            <Setter Property="FontSize" Value="14" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid >
                            <Border
                                x:Name="Border"
                                CornerRadius="4"
                                Background="{TemplateBinding Background}"
                                
                                BorderThickness="{TemplateBinding BorderThickness}" />

                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#AA353535"/>

                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">

                                <!--<Setter Property="Background" Value="DimGray"/>-->
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>





        <Style x:Key="TextBlockAsButton" TargetType="{x:Type TextBlock}">

            <Setter Property="Foreground" Value="#066A98"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="10 5"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="FontFamily" Value="Nunito Sans"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Style.Triggers>

                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="DodgerBlue" />
                </Trigger>
            </Style.Triggers>

        </Style>






        


        <Style x:Key="StyleButtonAccountTree" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border  Name="border" CornerRadius="4" Background="{TemplateBinding Background}">

                            <Grid Margin="10" >
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="5"/>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="5"/>
                                    <RowDefinition />
                                    <RowDefinition Height="5"/>
                                </Grid.RowDefinitions>

                                <TextBlock MaxWidth="{TemplateBinding ActualWidth}"
                                           TextWrapping="WrapWithOverflow"
                                           HorizontalAlignment="Left"
                                           FontWeight="Normal"
                                           FontSize="15"
                                           FontFamily="Nunito Sans"
                                           Name="btnText"
                                           Grid.Row="1"
                                           Text="{TemplateBinding Content}"
                                           Foreground="{TemplateBinding Foreground}"/>


                                <Viewbox Grid.Row="3">
                                    <Path Stretch="Fill"   Data="{TemplateBinding FontFamily,Converter={StaticResource GetSelectPathShape}}"     Stroke="White"/>
                                </Viewbox>





                                <!--<Image Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Grid.Column="0" Grid.ColumnSpan="3" Stretch="Fill" 
                                       Width="{TemplateBinding MinWidth,Converter={StaticResource WidthByScreen}}"
                                       Height="{TemplateBinding MinHeight,Converter={StaticResource HeighByScreen}}"
                                       Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>-->

                            </Grid>



                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="StyleButtonShapesVertical" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Grid>


                            <Border Name="border" CornerRadius="4" Background="{TemplateBinding Background}" Style="{StaticResource BorderHomePageIcon}"/>
                            <Border  Background="Transparent">

                                <Grid Margin="10" >
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="5"/>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="5"/>
                                        <RowDefinition />
                                        <RowDefinition Height="5"/>
                                    </Grid.RowDefinitions>

                                    <TextBlock MaxWidth="{TemplateBinding ActualWidth}"
                                           TextWrapping="WrapWithOverflow"
                                           HorizontalAlignment="Left"
                                           FontWeight="Normal"
                                           FontSize="15"
                                           FontFamily="Nunito Sans"
                                           Name="btnText"
                                           Grid.Row="1"
                                           Text="{TemplateBinding Content}"
                                           Foreground="{TemplateBinding Foreground}"/>


                                    <Grid HorizontalAlignment="Center" Grid.Row="3" Style="{StaticResource HomeButtonMargin}">
                                        <Viewbox >
                                            <Path Stretch="Fill"   Data="{TemplateBinding FontFamily,Converter={StaticResource GetSelectPathShape}}"     Fill="White"/>
                                        </Viewbox>

                                    </Grid>





                                    <!--<Image Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Grid.Column="0" Grid.ColumnSpan="3" Stretch="Fill" 
                                       Width="{TemplateBinding MinWidth,Converter={StaticResource WidthByScreen}}"
                                       Height="{TemplateBinding MinHeight,Converter={StaticResource HeighByScreen}}"
                                       Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>-->

                                </Grid>



                            </Border>

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>





        <Style x:Key="StyleButtonPersonalwithdraw" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="border" CornerRadius="4" Background="{TemplateBinding Background}">

                            <Grid Margin="10" >
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="5"/>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="5"/>
                                    <RowDefinition />
                                    <RowDefinition Height="5"/>
                                </Grid.RowDefinitions>

                                <TextBlock MaxWidth="{TemplateBinding ActualWidth}"
                                           TextWrapping="WrapWithOverflow"
                                           HorizontalAlignment="Left"
                                           FontWeight="Normal"
                                           FontSize="15"
                                           FontFamily="Nunito Sans"
                                           Name="btnText"
                                           Grid.Row="1"
                                           Text="{TemplateBinding Content}"
                                           Foreground="{TemplateBinding Foreground}"/>


                                <Viewbox Grid.Row="3">
                                    <Canvas>
                                        <Path Fill="White" Stretch="Fill" Data="M160.638,213.744h5.105a.638.638,0,0,0,.638-.638v-4.467a.638.638,0,0,0-.638-.638h-5.105a.638.638,0,0,0-.638.638v4.467a.638.638,0,0,0,.638.638Zm.638-4.467h3.829v3.191h-3.829Z"/>
                                        <Path Fill="White" Stretch="Fill" Data="M160,296h1.276v1.276H160Z"/>
                                        <Path Fill="White" Stretch="Fill" Data="M192,296h1.276v1.276H192Z"/>
                                        <Path Fill="White" Stretch="Fill" Data="M224,296h1.276v1.276H224Z"/>
                                        <Path Fill="White" Stretch="Fill" Data="M256,296h1.276v1.276H256Z"/>
                                        <Path Fill="White" Stretch="Fill" Data="M160,328h3.829v1.276H160Z"/>
                                        <Path Fill="White" Stretch="Fill" Data="M224,328h2.553v1.276H224Z"/>
                                        <Path Fill="White" Stretch="Fill" Data="M53.634,33.127l-2.979-5.533a3.839,3.839,0,0,0-3.384-2.021H37.324l-9.386-9.386a.638.638,0,0,0-.9,0L16.187,27.036a.638.638,0,0,0,0,.9l8.747,8.747v8.032a.638.638,0,0,0,.638.638H33.6l4.28,4.28a.638.638,0,0,0,.9,0l1.327-1.327a5.144,5.144,0,0,0,.774,1.13v.384H38.974a.638.638,0,0,0-.638.638v3.829h1.276V51.1H50.461v3.191h1.276V50.462a.638.638,0,0,0-.638-.638h-.467l3.355-13.977a3.839,3.839,0,0,0-.353-2.719ZM27.487,17.541l3.13,3.13a5.1,5.1,0,0,1-6.26,0Zm-9.946,9.946,3.13-3.13a5.1,5.1,0,0,1,0,6.26ZM24.934,29.4v5.479L21.58,31.527a6.384,6.384,0,0,0,0-8.078l1.868-1.868a6.384,6.384,0,0,0,8.078,0l7.184,7.184H25.572a.638.638,0,0,0-.638.638Zm13.4,18.881-2.926-2.927h4.2a5.221,5.221,0,0,0,.051,1.605Zm1.6-4.2H26.211V30.04H47.27v4.951a2.069,2.069,0,0,1-3.533,1.463l-1.6-1.6A3.346,3.346,0,1,0,37.4,39.581l3.25,3.25a5.108,5.108,0,0,0-.718,1.249Zm12.812-8.531L49.32,49.823H42.165v-.638a.638.638,0,0,0-.187-.451,3.879,3.879,0,0,1,0-5.479.638.638,0,0,0,0-.9L38.3,38.678a2.069,2.069,0,0,1,2.926-2.926l1.6,1.6a3.346,3.346,0,0,0,5.712-2.366V29.4a.638.638,0,0,0-.638-.638H40.515L38.6,26.849h8.67a2.564,2.564,0,0,1,2.26,1.35l2.979,5.533a2.564,2.564,0,0,1,.236,1.816Z"/>

                                    </Canvas>
                                </Viewbox>





                                <!--<Image Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Grid.Column="0" Grid.ColumnSpan="3" Stretch="Fill" 
                                       Width="{TemplateBinding MinWidth,Converter={StaticResource WidthByScreen}}"
                                       Height="{TemplateBinding MinHeight,Converter={StaticResource HeighByScreen}}"
                                       Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>-->

                            </Grid>



                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>







        <Style x:Key="StyleButtonShapesHorizontal" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>

                            <Border Name="border" CornerRadius="4" Background="{TemplateBinding Background}" Style="{StaticResource BorderHomePageIcon}"/>



                            <Border   Background="Transparent">


                                <Grid Margin="10" >
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="0"/>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="30"/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="5"/>
                                    </Grid.ColumnDefinitions>

                                    <TextBlock MaxWidth="{TemplateBinding ActualWidth}"
                                           TextWrapping="WrapWithOverflow"
                                          
                                           FontWeight="Normal"
                                           FontSize="15"
                                           FontFamily="Nunito Sans"
                                           Name="btnText"
                                           Grid.Column="1"
                                           Text="{TemplateBinding Content}"
                                           Foreground="{TemplateBinding Foreground}"/>

                                    <Grid Grid.Column="3" Style="{StaticResource HomeButtonMargin}">
                                        <Viewbox >
                                            <Path FlowDirection="LeftToRight"   Stretch="Fill"   Data="{TemplateBinding FontFamily,Converter={StaticResource GetSelectPathShape}}"     Fill="White"/>
                                        </Viewbox>

                                    </Grid>





                                    <!--<Image Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Grid.Column="0" Grid.ColumnSpan="3" Stretch="Fill" 
                                      Width="{TemplateBinding MinWidth,Converter={StaticResource WidthByScreen}}"
                                       Height="{TemplateBinding MinHeight,Converter={StaticResource HeighByScreen}}"
                                       Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>-->

                                </Grid>



                            </Border>

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="StyleButtonHorizon" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>


                            <Border Name="border" CornerRadius="4" Background="{TemplateBinding Background}">

                                <Grid Margin="10" >
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition Width="20"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>

                                    <TextBlock MaxWidth="{TemplateBinding ActualWidth}"
                                           TextWrapping="WrapWithOverflow"
                                           HorizontalAlignment="Left"
                                           FontWeight="Normal"
                                           FontSize="15"
                                           FontFamily="Nunito Sans"
                                           Name="btnText"
                                           
                                           Text="{TemplateBinding Content}"
                                           Foreground="{TemplateBinding Foreground}"/>


                                    <Image 
                                       VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                       Grid.Column="2"
                                     Margin="10"
                                       Stretch="Uniform" 
                                  Height="{TemplateBinding MinHeight}"
                                        Width="{TemplateBinding MinHeight}"
                                        Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>
                                    <!--<Image Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Grid.Column="0" Grid.ColumnSpan="3" Stretch="Fill" 
                                       Width="{TemplateBinding MinWidth,Converter={StaticResource WidthByScreen}}"
                                       Height="{TemplateBinding MinHeight,Converter={StaticResource HeighByScreen}}"
                                       Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>-->

                                </Grid>


                            </Border>

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="StyleButtonVerticalCenter" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>

                            <Border Name="border" CornerRadius="4" Background="{TemplateBinding Background}" Style="{StaticResource BorderHomePageIcon}"/>
                            <Border   Background="Transparent">

                                <Grid Margin="10" >
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="5"/>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="20"/>
                                        <RowDefinition/>
                                        <RowDefinition Height="5"/>
                                    </Grid.RowDefinitions>


                                    <TextBlock Grid.Row="1" MaxWidth="{TemplateBinding ActualWidth}"
                                           TextWrapping="WrapWithOverflow"
                                           HorizontalAlignment="Left"
                                           FontWeight="Normal"
                                           FontSize="15"
                                           FontFamily="Nunito Sans"
                                           Name="btnText"
                                           
                                           Text="{TemplateBinding Content}"
                                           Foreground="{TemplateBinding Foreground}"/>



                                    <Grid HorizontalAlignment="Center" Grid.Row="3" Style="{StaticResource HomeButtonMargin}">



                                        <Viewbox  Stretch="Fill">
                                            <Image Stretch="Fill" 
                                           Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>
                                        </Viewbox>


                                    </Grid>


                                    <!--<Image Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Grid.Column="0" Grid.ColumnSpan="3" Stretch="Fill" 
                                       Width="{TemplateBinding MinWidth,Converter={StaticResource WidthByScreen}}"
                                       Height="{TemplateBinding MinHeight,Converter={StaticResource HeighByScreen}}"
                                       Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>-->

                                </Grid>



                            </Border>

                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="StyleButtonVertical" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border Name="border" CornerRadius="4" Background="{TemplateBinding Background}" Style="{StaticResource BorderHomePageIcon}"/>



                            <Border   Background="Transparent">

                                <Grid Margin="10" >
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="5"/>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="20"/>
                                        <RowDefinition/>
                                        <RowDefinition Height="5"/>
                                    </Grid.RowDefinitions>


                                    <TextBlock Grid.Row="1" MaxWidth="{TemplateBinding ActualWidth}"
                                           TextWrapping="WrapWithOverflow"
                                           HorizontalAlignment="Left"
                                           FontWeight="Normal"
                                           FontSize="15"
                                           FontFamily="Nunito Sans"
                                           Name="btnText"
                                           
                                           Text="{TemplateBinding Content}"
                                           Foreground="{TemplateBinding Foreground}"/>



                                    <Grid HorizontalAlignment="Center" Grid.Row="3" Style="{StaticResource HomeButtonMargin}">



                                        <Viewbox  Stretch="Fill">
                                            <Image Stretch="Fill" 
                                           Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>
                                        </Viewbox>


                                    </Grid>


                                    <!--<Image Margin="0,0,10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Grid.Column="0" Grid.ColumnSpan="3" Stretch="Fill" 
                                       Width="{TemplateBinding MinWidth,Converter={StaticResource WidthByScreen}}"
                                       Height="{TemplateBinding MinHeight,Converter={StaticResource HeighByScreen}}"
                                       Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>-->

                                </Grid>



                            </Border>

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="dodgerblue" />
                                <Setter Property="Foreground" TargetName="btnText" Value="black"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="StyleButtonBottomHomePage" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="border" CornerRadius="4" Background="{TemplateBinding Background}">
                            <Grid Margin="0,0,0,5">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="{TemplateBinding MinHeight}"/>
                                    <RowDefinition Height="2"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Image  HorizontalAlignment="Center" VerticalAlignment="Bottom"
                                       Grid.Column="0" Grid.ColumnSpan="3" Stretch="Uniform" 
                                       Width="{TemplateBinding MinWidth}" Height="{TemplateBinding MinHeight}"
                                       Source="{TemplateBinding Uid,Converter={StaticResource ImageSourceConverter}}"/>

                                <TextBlock Grid.Row="2" MaxWidth="{TemplateBinding ActualWidth}" TextWrapping="Wrap"
                                            FontWeight="Bold" FontSize="13" FontFamily="Nunito Sans"
                                           Name="btnText" Margin="5,10,0,0" Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                           />


                            </Grid>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="Dodgerblue" />
                                <Setter Property="Foreground" TargetName="btnText" Value="white"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>





        <Style x:Key="DataGridStyle" TargetType="DataGrid">
            <Setter Property="RowHeaderWidth" Value="30"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource GraySystem}"/>
            <Setter Property="GridLinesVisibility" Value="Horizontal"/>
            <Setter Property="ColumnWidth" Value="*"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="AutoGenerateColumns" Value="False"/>

            <Setter Property="RowHeaderTemplate" >
                <Setter.Value>
                    <DataTemplate >

                        <TextBlock Padding="5,0" HorizontalAlignment="Center"  FontSize="16"
                   Text="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow},
                                     Path=Header}"/>



                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>





        <Style x:Key="BorderLogin" TargetType="Border">
            <Setter Property="CornerRadius" Value="20"/>
            <Setter Property="Height" Value="388"/>
            <Setter Property="Width" Value="662"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                                 ShadowDepth="2"
                                 Direction="220"
                                 Color="#5E5E5E"
                                 Opacity=".2"
                                BlurRadius="10"/>
                </Setter.Value>

            </Setter>

            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="White"  />
                </Setter.Value>
            </Setter>

        </Style>





    </Application.Resources>
</Application>
